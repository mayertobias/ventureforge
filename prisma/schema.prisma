// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  supportGrants SupportGrant[]

  // Monetization
  stripeCustomerId String?   @unique
  subscriptionPlan Plan      @default(FREE)
  credits          Int       @default(100) // Updated starter credits

  // Zero-Knowledge Encryption
  kmsKeyId      String?   // Reference to user's encryption key in KMS
  encryptionEnabled Boolean @default(true) // Flag to enable/disable encryption
}

model Project {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // The actual content generated by the AI for each module
  ideaOutput      Json?
  researchOutput  Json?
  blueprintOutput Json?
  financialOutput Json?
  pitchOutput     Json?
  gtmOutput       Json?

  // Support access control
  supportGrants SupportGrant[]
}

model SupportGrant {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  ticketId  String   // Support ticket ID for tracking
  status    SupportGrantStatus @default(ACTIVE)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, projectId, ticketId])
}

enum SupportGrantStatus {
  ACTIVE
  EXPIRED
  REVOKED
}

// Models for NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Plan {
  FREE
  FORGE
  ACCELERATOR
}