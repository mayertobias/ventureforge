// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  supportGrants SupportGrant[]
  usageHistory  UsageHistory[]

  // Monetization
  stripeCustomerId String?   @unique
  subscriptionPlan Plan      @default(FREE)
  credits          Int       @default(100)
  totalCreditsUsed Int       @default(0)

  // User Preferences
  preferences      UserPreferences?
  
  // Privacy Settings
  allowPersistentStorage Boolean @default(false) // User choice for data persistence
  privacyPolicyAccepted  Boolean @default(false)
  termsOfServiceAccepted Boolean @default(false)
}

model Project {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Storage mode
  storageMode ProjectStorageMode @default(MEMORY_ONLY)
  expiresAt   DateTime? // For memory-only projects

  // The actual content generated by the AI for each module
  // Only populated if user opts for persistent storage
  ideaOutput      Json?
  researchOutput  Json?
  blueprintOutput Json?
  financialOutput Json?
  pitchOutput     Json?
  gtmOutput       Json?

  // Metadata (always stored)
  totalCreditsUsed Int @default(0)
  moduleProgress   Json? // Track which modules are completed
  lastExportedAt   DateTime?

  // Support access control
  supportGrants SupportGrant[]
}

model SupportGrant {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  ticketId  String   // Support ticket ID for tracking
  status    SupportGrantStatus @default(ACTIVE)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, projectId, ticketId])
}

enum SupportGrantStatus {
  ACTIVE
  EXPIRED
  REVOKED
}

// Models for NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Plan {
  FREE
  FORGE
  ACCELERATOR
}

enum ProjectStorageMode {
  MEMORY_ONLY    // Default: stored in session memory only
  PERSISTENT     // User opted for database storage
}

model UserPreferences {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // UI Preferences
  theme           String @default("light") // light, dark, auto
  defaultTemplate String @default("comprehensive") // report template preference
  autoSaveEnabled Boolean @default(true)
  
  // Privacy Preferences  
  dataRetentionDays    Int     @default(30) // How long to keep persistent data
  analyticsOptOut      Boolean @default(false)
  marketingOptOut      Boolean @default(false)
  
  // Notification Preferences
  emailNotifications   Boolean @default(true)
  exportNotifications  Boolean @default(true)
  creditAlerts         Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UsageHistory {
  id       String @id @default(cuid())
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Usage Details
  action      UsageAction // IDEA_GENERATION, RESEARCH, etc.
  projectId   String?     // Reference to project (may be memory-only)
  projectName String?     // Store name for history even after project deleted
  
  // Cost Tracking
  creditsUsed    Int
  creditsBalance Int // User's balance after this action
  
  // Metadata
  metadata  Json? // Store additional context (AI model used, processing time, etc.)
  createdAt DateTime @default(now())
  
  @@index([userId, createdAt])
}

enum UsageAction {
  IDEA_GENERATION
  RESEARCH
  BLUEPRINT
  FINANCIALS  
  PITCH
  GTM
  REPORT_EXPORT
  CREDIT_PURCHASE
  CREDIT_REFUND
}