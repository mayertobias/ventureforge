exports.id=2756,exports.ids=[2756],exports.modules={12909:(a,b,c)=>{"use strict";c.d(b,{N:()=>f});var d=c(36344),e=c(31183);let f={providers:[(0,d.A)({clientId:process.env.GOOGLE_CLIENT_ID,clientSecret:process.env.GOOGLE_CLIENT_SECRET})],callbacks:{async signIn({user:a,account:b,profile:c}){if(b?.provider==="google")try{await e.z.user.findUnique({where:{email:a.email}})||await e.z.user.create({data:{email:a.email,name:a.name,image:a.image,credits:100}})}catch(a){return console.error("Error creating user:",a),!1}return!0},async session({session:a,token:b}){if(a?.user?.email){let b=await e.z.user.findUnique({where:{email:a.user.email}});b&&a.user&&(a.user.id=b.id)}return a},jwt:async({user:a,token:b})=>b},session:{strategy:"jwt"},secret:process.env.NEXTAUTH_SECRET}},31183:(a,b,c)=>{"use strict";c.d(b,{z:()=>e});var d=c(96330);let e=globalThis.prisma??new d.PrismaClient},48276:(a,b,c)=>{"use strict";c.d(b,{P:()=>i});var d=c(55511),e=c.n(d);class f{static{this.ALGORITHM="aes-256-gcm"}static{this.KEY_LENGTH=32}static{this.IV_LENGTH=16}static generateEncryptionKey(){return e().randomBytes(this.KEY_LENGTH).toString("base64")}static encrypt(a,b){try{let c=e().randomBytes(this.IV_LENGTH),d=Buffer.from(b,"base64"),f=e().createCipheriv(this.ALGORITHM,d,c);f.setAAD(Buffer.from("ventureforge-encryption","utf8"));let g=JSON.stringify(a),h=f.update(g,"utf8","base64");h+=f.final("base64");let i=f.getAuthTag();return{encryptedData:h,iv:c.toString("base64"),authTag:i.toString("base64")}}catch(a){throw console.error("Encryption failed:",a),Error("Failed to encrypt data")}}static decrypt(a,b){try{let c=Buffer.from(b,"base64"),d=Buffer.from(a.iv,"base64"),f=Buffer.from(a.authTag,"base64"),g=e().createDecipheriv(this.ALGORITHM,c,d);g.setAAD(Buffer.from("ventureforge-encryption","utf8")),g.setAuthTag(f);let h=g.update(a.encryptedData,"base64","utf8");return h+=g.final("utf8"),JSON.parse(h)}catch(a){throw console.error("Decryption failed:",a),Error("Failed to decrypt data - key may be invalid")}}static validateEncryption(a,b){try{return this.decrypt(a,b),!0}catch{return!1}}static encryptProjectData(a,b){let c={...a};return["ideaOutput","researchOutput","blueprintOutput","financialOutput","pitchOutput","gtmOutput"].forEach(d=>{a[d]&&(c[d]=this.encrypt(a[d],b))}),c}static decryptProjectData(a,b){let c={...a};return["ideaOutput","researchOutput","blueprintOutput","financialOutput","pitchOutput","gtmOutput"].forEach(d=>{a[d]&&"object"==typeof a[d]&&a[d].encryptedData&&a[d].iv&&a[d].authTag&&(c[d]=this.decrypt(a[d],b))}),c}}var g=c(13248),h=c.n(g);class i{static async initializeVault(){return this.vaultClient||(this.vaultClient=h()({endpoint:process.env.VAULT_ADDR||"http://127.0.0.1:8200",token:process.env.VAULT_TOKEN||"dev-token"})),this.vaultClient}static async generateUserKey(a){try{let b=await this.initializeVault(),c=`ventureforge-user-${a}`,d=`vf_key_${a}_${Date.now()}`;return await b.write(`transit/keys/${c}`,{type:"aes256-gcm96",exportable:!1,allow_rotation:!0,deletion_allowed:!0}),console.log(`[USER-ENCRYPTION] Generated new encryption key for user ${a}: ${c}`),d}catch(c){console.error("User key generation failed:",c);let b=`vf_key_${a}_${Date.now()}`;return console.log(`[USER-ENCRYPTION] Fallback: Generated local key for user ${a}: ${b}`),b}}static async encryptUserData(a,b){try{let c=await this.initializeVault(),d=`ventureforge-user-${a}`,e=Buffer.from(JSON.stringify(b)).toString("base64");return{encryptedData:(await c.write(`transit/encrypt/${d}`,{plaintext:e,context:Buffer.from(`ventureforge-project-${a}`).toString("base64")})).data.ciphertext,keyName:d,encrypted:!0}}catch(c){console.error("User data encryption failed, using fallback:",c);let a=f.generateEncryptionKey();return f.encrypt(b,a)}}static async decryptUserData(a,b){try{if(b.encrypted&&b.encryptedData){let c=await this.initializeVault(),d=`ventureforge-user-${a}`,e=await c.write(`transit/decrypt/${d}`,{ciphertext:b.encryptedData,context:Buffer.from(`ventureforge-project-${a}`).toString("base64")}),f=Buffer.from(e.data.plaintext,"base64").toString();return JSON.parse(f)}if(b.iv&&b.authTag){let a=f.generateEncryptionKey();return f.decrypt(b,a)}return b}catch(a){throw console.error("User data decryption failed:",a),Error("Failed to decrypt user data - access denied")}}static async rotateUserKey(a){try{let b=await this.initializeVault(),c=`ventureforge-user-${a}`;await b.write(`transit/keys/${c}/rotate`,{});let d=`vf_key_${a}_${Date.now()}`;return console.log(`[USER-ENCRYPTION] Rotated encryption key for user ${a}: ${c}`),d}catch(a){throw console.error("User key rotation failed:",a),Error("Failed to rotate user encryption key")}}static async validateUserKey(a){try{let b=await this.initializeVault(),c=`ventureforge-user-${a}`,d=await b.read(`transit/keys/${c}`);return d&&d.data}catch(a){return console.error("User key validation failed:",a),!1}}static async deleteUserKey(a){try{let b=await this.initializeVault(),c=`ventureforge-user-${a}`;await b.write(`transit/keys/${c}/config`,{deletion_allowed:!0}),await b.delete(`transit/keys/${c}`),console.log(`[USER-ENCRYPTION] Deleted encryption key for user ${a}: ${c}`)}catch(a){throw console.error("User key deletion failed:",a),Error("Failed to delete user encryption key")}}}},78335:()=>{},81849:(a,b,c)=>{"use strict";c.d(b,{U:()=>h});var d=c(37449);if(!process.env.GEMINI_API_KEY)throw Error("GEMINI_API_KEY is not set in environment variables");let e=new d.ij(process.env.GEMINI_API_KEY),f=e.getGenerativeModel({model:"gemini-2.0-flash-exp",generationConfig:{maxOutputTokens:8192,temperature:.7}});e.getGenerativeModel({model:"gemini-1.5-pro",generationConfig:{maxOutputTokens:8192,temperature:.5}}),e.getGenerativeModel({model:"gemini-1.5-flash",generationConfig:{maxOutputTokens:8192,temperature:.7}});let g={maxRetries:3,timeoutMs:3e5,backoffMs:2e3};class h{static async delay(a){return new Promise(b=>setTimeout(b,a))}static async makeGeminiRequest(a,b,c){let d=f.generateContent([a,b]),e=new Promise((a,b)=>setTimeout(()=>b(Error("Request timeout")),c));return(await Promise.race([d,e])).response.text()}static async generateWithRetry(a){let b={...g,...a.retryConfig},c=null,d=0;for(let e=0;e<=b.maxRetries;e++)try{console.log(`[AI_SERVICE] Attempt ${e+1}/${b.maxRetries+1}`);let c=await this.makeGeminiRequest(a.prompt,a.userPrompt,b.timeoutMs);if(!c)throw Error("Empty response from AI service");return console.log(`[AI_SERVICE] Success on attempt ${e+1}`),{content:c,retryCount:e,successful:!0}}catch(a){if(c=a,d=e,console.warn(`[AI_SERVICE] Attempt ${e+1} failed:`,c.message),e<b.maxRetries){let a=b.backoffMs*Math.pow(2,e);console.log(`[AI_SERVICE] Retrying in ${a}ms...`),await this.delay(a)}}return console.error(`[AI_SERVICE] All ${b.maxRetries+1} attempts failed. Last error:`,c?.message),{content:"",retryCount:d,successful:!1}}static async generateInPhases(a,b){let c=[],d="",e=!0;for(let f=0;f<a.length;f++){let g=a[f];console.log(`[AI_SERVICE] Starting phase ${f+1}/${a.length}`);let h=g.prompt;(g.context||d)&&(h+=`

**CONTEXT FROM PREVIOUS PHASES:**
${JSON.stringify(g.context||d.substring(0,1e3))}`);let i=await this.generateWithRetry({prompt:h,userPrompt:g.userPrompt,retryConfig:b});c.push(i),i.successful?d+=i.content+"\n\n":(console.error(`[AI_SERVICE] Phase ${f+1} failed, continuing with partial results`),e=!1)}return{phases:c,combinedContent:d.trim(),successful:e}}static parseJSONResponse(a){try{let b=a.replace(/```json\n?|\n?```/g,"").trim();return{parsed:JSON.parse(b),success:!0}}catch(b){return console.error("[AI_SERVICE] JSON parsing error:",b),console.error("[AI_SERVICE] Raw response:",a.substring(0,500)),{parsed:null,success:!1,error:`JSON parsing failed: ${b.message}`}}}static createFallbackResponse(a,b){let c=new Date().toISOString();return({research:{marketLandscape:{totalAddressableMarket:"Analysis in progress - AI service temporarily unavailable",serviceableAddressableMarket:"To be determined when service recovers",marketGrowthRate:"Pending analysis",keyTrends:"Market research will be completed when AI service is restored"},targetCustomerAnalysis:{primarySegment:"Customer analysis pending",customerPainPoints:["Analysis interrupted - will complete when service is restored"],buyingBehavior:"Research in progress"},competitiveLandscape:{mainCompetitors:["Analysis will be completed when AI service recovers"],competitiveGap:"Detailed analysis pending service restoration"},_fallback:!0,_timestamp:c,_reason:"AI service timeout - analysis will be completed when service is restored"},blueprint:{executiveSummary:{businessConcept:"Business analysis interrupted - will be completed when AI service is restored",marketOpportunity:"Analysis pending",uniqueAdvantage:"To be determined",revenueProjection:"Financial analysis will be completed when service recovers"},_fallback:!0,_timestamp:c,_reason:"AI service timeout - blueprint will be completed when service is restored"},financials:{keyAssumptions:[{assumption:"Analysis Pending",value:"To be calculated when AI service is restored",justification:"Financial modeling interrupted - will complete when service is available"}],_fallback:!0,_timestamp:c,_reason:"AI service timeout - financial projections will be completed when service is restored"},pitch:{executiveSummary:"Pitch development interrupted - will be completed when AI service is restored",pitchDeckSlides:{problemSlide:{headline:"Analysis in Progress",problemStatement:"Pitch development will be completed when AI service is restored"}},_fallback:!0,_timestamp:c,_reason:"AI service timeout - investor pitch will be completed when service is restored"},gtm:{strategicOverview:{gtmThesis:"Go-to-market analysis interrupted - will be completed when AI service is restored",marketEntryStrategy:"Analysis pending",primaryObjective:"Strategy development will resume when service is available"},_fallback:!0,_timestamp:c,_reason:"AI service timeout - GTM strategy will be completed when service is restored"}})[a]||{message:"Analysis in progress - will be completed when AI service is restored",_fallback:!0,_timestamp:c,_moduleType:a}}}},96487:()=>{}};